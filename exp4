import numpy as np
from scipy.special import erfc
import matplotlib.pyplot as plt

# Parameters
N = 10**5  # Number of bits or symbols
Eb_N0_dB = np.arange(-3, 60, 1)  # Multiple Eb/N0 (SNR) values

# Transmitter
ip = np.random.randint(0, 2, N)  # Generating 0,1 with equal probability
s = 2*ip - 1  # BPSK modulation s --> +1 or -1

# Simulation
nErr = np.zeros(len(Eb_N0_dB))
for i in range(len(Eb_N0_dB)):
    n = np.sqrt(0.5) * (np.random.randn(N) + 1j*np.random.randn(N)) # White gaussian noise
    h = np.sqrt(0.5) * (np.random.randn(N) + 1j*np.random.randn(N)) # Rayleigh fading
    y = h * s + 10**(-Eb_N0_dB[i]/20) * n # Received signal
    y_eq = y / h # Equalization at receiver
    ipHat = np.real(y_eq) > 0 # Receiver - hard decision decoding
    nErr[i] = np.sum(ip != ipHat)

# BER calculation
simBer = nErr / N
theoryBerAWGN = 0.5*erfc(np.sqrt(10**(Eb_N0_dB/10)))
theoryBerRayleigh = 0.5*(1 - np.sqrt(10*(Eb_N0_dB/10) / (1 + 10*(Eb_N0_dB/10))))

# Plot
plt.semilogy(Eb_N0_dB, theoryBerAWGN, 'cd-', linewidth=2)
plt.semilogy(Eb_N0_dB, theoryBerRayleigh, 'bp--', linewidth=2)
plt.semilogy(Eb_N0_dB, simBer, 'rx-', linewidth=2)
plt.axis([-3, 35, 1e-5, 0.5])
plt.grid(True, which="both")
plt.legend(['AWGN-Theory', 'Rayleigh-Theory', 'Rayleigh-Simulation'])
plt.xlabel('Eb/No, dB')
plt.ylabel('Bit Error Rate')
plt.title('BER for BPSK modulation in Rayleigh channel')
plt.show()
